<?xml version="1.0" encoding="ISO-8859-1"?>

<!--

Copyright (c) 2002, Simone Bordet
All rights reserved.

This software is distributable under the BSD license.
See the terms of the BSD license in the documentation provided with this software.

-->

<project name="Foxtrot" default="main" basedir="..">

   <property name="name" value="foxtrot"/>
   <!-- REMEMBER: change also the manifest information -->
   <property name="version" value="2.0-beta3"/>

   <property name="src.dir" value="${basedir}/src"/>
   <property name="core.src.dir" value="${src.dir}/core"/>
   <property name="examples.src.dir" value="${src.dir}/examples"/>
   <property name="test.src.dir" value="${src.dir}/test"/>

   <property name="classes.dir" value="${basedir}/classes"/>
   <property name="core.classes.dir" value="${classes.dir}/core"/>
   <property name="examples.classes.dir" value="${classes.dir}/examples"/>
   <property name="test.classes.dir" value="${classes.dir}/test"/>

   <property name="etc.dir" value="${src.dir}/etc"/>

   <property name="lib.dir" value="${basedir}/lib"/>

   <property name="dist.dir" value="${basedir}/dist"/>
   <property name="dist.lib.dir" value="${dist.dir}/lib"/>
   <property name="dist.docs.dir" value="${dist.dir}/docs"/>
   <property name="dist.docs.api.dir" value="${dist.docs.dir}/api"/>
   <property name="dist.release.dir" value="${dist.dir}/${name}-${version}"/>
   <property name="dist.test.dir" value="${dist.dir}/test"/>
   <property name="dist.test.xml.dir" value="${dist.test.dir}/xml/${java.version}"/>
   <property name="dist.test.html.dir" value="${dist.test.dir}/html/${java.version}"/>

   <property name="core.jar.file" value="${dist.lib.dir}/${name}.jar"/>
   <property name="examples.jar.file" value="${dist.lib.dir}/${name}-examples.jar"/>
   <property name="test.jar.file" value="${dist.lib.dir}/${name}-tests.jar"/>
   <property name="src.jar.file" value="${dist.lib.dir}/${name}-src.jar"/>

   <patternset id="core.classes">
      <include name="foxtrot/*.class"/>
      <include name="foxtrot/pumps/**/*.class"/>
      <include name="foxtrot/workers/**/*.class"/>
   </patternset>

   <patternset id="examples.classes">
      <include name="foxtrot/examples/**/*.class"/>
   </patternset>

   <patternset id="test.classes">
      <include name="foxtrot/test/**/*.class"/>
   </patternset>

   <patternset id="src.files">
      <include name="**/*.java"/>
   </patternset>

   <target name="compile">
      <mkdir dir="${core.classes.dir}"/>
      <javac srcdir="${core.src.dir}"
         destdir="${core.classes.dir}"
         debug="on"
         deprecation="on">
      </javac>

      <mkdir dir="${examples.classes.dir}"/>
      <javac srcdir="${examples.src.dir}"
         destdir="${examples.classes.dir}"
         debug="on"
         deprecation="on"
         classpath="${core.classes.dir}">
      </javac>

      <mkdir dir="${test.classes.dir}"/>
      <javac srcdir="${test.src.dir}"
         destdir="${test.classes.dir}"
         debug="on"
         deprecation="on">
         <classpath>
            <pathelement location="${core.classes.dir}"/>
            <fileset dir="${lib.dir}">
               <include name="**/*.jar"/>
            </fileset>
         </classpath>
      </javac>
   </target>

   <target name="jar" depends="compile">
      <mkdir dir="${dist.lib.dir}"/>

      <jar jarfile="${core.jar.file}"
         manifest="${etc.dir}/MANIFEST.MF">
         <fileset dir="${core.classes.dir}">
            <patternset refid="core.classes"/>
         </fileset>
      </jar>

      <jar jarfile="${examples.jar.file}"
         manifest="${etc.dir}/MANIFEST.MF">
         <fileset dir="${examples.classes.dir}">
            <patternset refid="examples.classes"/>
         </fileset>
      </jar>

      <jar jarfile="${test.jar.file}"
         manifest="${etc.dir}/MANIFEST.MF">
         <fileset dir="${test.classes.dir}">
            <patternset refid="test.classes"/>
         </fileset>
      </jar>

      <jar jarfile="${src.jar.file}"
         manifest="${etc.dir}/MANIFEST.MF">
         <fileset dir="${core.src.dir}">
            <patternset refid="src.files"/>
         </fileset>
         <fileset dir="${examples.src.dir}">
            <patternset refid="src.files"/>
         </fileset>
         <fileset dir="${test.src.dir}">
            <patternset refid="src.files"/>
         </fileset>
      </jar>
   </target>

   <target name="javadocs">
      <mkdir dir="${dist.docs.api.dir}"/>
      <javadoc destdir="${dist.docs.api.dir}"
         packagenames="foxtrot.*"
         author="true"
         version="true"
         use="true"
         windowtitle="Foxtrot API">
         <sourcepath>
            <pathelement path="${core.src.dir}"/>
            <pathelement path="${examples.src.dir}"/>
         </sourcepath>
      </javadoc>
   </target>

   <target name="main" depends="jar">

   </target>

   <target name="test" depends="main">
      <junit printsummary="withOutAndErr" fork="yes" dir="${basedir}">
         <formatter type="plain" usefile="no"/>
         <test name="${test}" if="test" fork="yes"/>
         <classpath>
            <fileset dir="${dist.lib.dir}">
               <include name="*.jar"/>
            </fileset>
         </classpath>
      </junit>
   </target>

   <target name="tests" depends="main">
      <junit printsummary="withOutAndErr" fork="yes" timeout="600000" dir="${basedir}" showoutput="yes">
         <formatter type="plain" usefile="false"/>
         <batchtest fork="yes">
            <fileset dir="${test.src.dir}">
               <include name="foxtrot/test/**/*Test.java"/>
            </fileset>
         </batchtest>
         <classpath>
            <fileset dir="${dist.lib.dir}">
               <include name="*.jar"/>
            </fileset>
         </classpath>
      </junit>
   </target>
<!--
   <target name="tests-report" depends="main">
      <mkdir dir="${dist.test.xml.dir}"/>
      <mkdir dir="${dist.test.html.dir}"/>
      <junit printsummary="withOutAndErr" fork="yes" timeout="600000" dir="${basedir}" showoutput="yes">
         <formatter type="xml"/>
         <batchtest fork="yes" todir="${dist.test.xml.dir}">
            <fileset dir="${test.src.dir}">
               <include name="foxtrot/test/**/*Test.java"/>
            </fileset>
         </batchtest>
         <classpath>
            <fileset dir="${dist.lib.dir}">
               <include name="*.jar"/>
            </fileset>
            <fileset dir="${basedir}/build">
               <include name="jaxp.jar"/>
               <include name="crimson.jar"/>
            </fileset>
         </classpath>
      </junit>

      <junitreport todir="${dist.test.xml.dir}">
         <fileset dir="${dist.test.xml.dir}">
            <include name="TEST-*.xml"/>
         </fileset>
         <report format="frames" todir="${dist.test.html.dir}"/>
      </junitreport>
   </target>
-->
   <!--
      Creates a release building jars and docs an creating zip and tar.gz
      release file. The filenames are built using the version label
   -->
   <target name="release" depends="clean, jar, javadocs">
      <mkdir dir="${dist.release.dir}"/>

      <!-- Miscellaneous files -->
      <copy todir="${dist.release.dir}">
         <fileset dir="${etc.dir}"
            includes="README,LICENSE"/>
      </copy>

      <!-- The core, examples, tests and source foxtrot jars -->
      <copy file="${core.jar.file}" todir="${dist.release.dir}/lib"/>
      <copy file="${examples.jar.file}" todir="${dist.release.dir}/lib"/>
      <copy file="${test.jar.file}" todir="${dist.release.dir}/lib"/>
      <copy file="${src.jar.file}" todir="${dist.release.dir}/lib"/>

      <!-- The documentation -->
      <copy todir="${dist.release.dir}/docs">
         <fileset dir="${dist.docs.dir}"/>
      </copy>

      <tar tarfile="${dist.dir}/${name}-${version}.tar" basedir="${dist.dir}" includes="${name}-${version}/**"/>
      <gzip zipfile="${dist.dir}/${name}-${version}.tar.gz" src="${dist.dir}/${name}-${version}.tar"/>
      <delete file="${dist.dir}/${name}-${version}.tar"/>

      <zip destfile="${dist.dir}/${name}-${version}.zip" basedir="${dist.dir}" includes="${name}-${version}/**"/>

      <delete dir="${dist.release.dir}" quiet="true"/>
   </target>

   <target name="clean">
      <delete dir="${classes.dir}" quiet="true"/>
      <delete dir="${dist.dir}" quiet="true"/>
   </target>

</project>
